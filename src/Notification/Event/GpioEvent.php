<?php
namespace Volantus\Pigpio\Notification\Event;

/**
 * Class GpioEvent
 *
 * @package Volantus\Pigpio\Notification\Event
 */
abstract class GpioEvent
{
    const MAX_32_BIT_INT = 2147483647;

    /**
     * Incrementing individual sequence number for each event (generated by Pigpio)
     *
     * @var int
     */
    private $sequenceId;

    /**
     * Number of microseconds since boot
     * Warning#1: 32 Bit integer, therefore flips around after ~1h 12min
     * Warning#2: Number may be negative on 32 bit systems
     *
     * @var int
     */
    private $ticks;

    /**
     * @var GpioStatus[]
     */
    private $gpioStatus;

    /**
     * @param int   $sequence
     * @param int   $ticks
     * @param array $gpioStatus
     */
    public function __construct(int $sequence, int $ticks, array $gpioStatus)
    {
        $this->sequenceId = $sequence;
        $this->ticks = $ticks;
        $this->gpioStatus = $gpioStatus;
    }

    /**
     * @return int
     */
    public function getSequenceId(): int
    {
        return $this->sequenceId;
    }

    /**
     * @return int
     */
    public function getTicks(): int
    {
        return $this->ticks;
    }

    /**
     * @return GpioStatus[]
     */
    public function getGpioStatus(): array
    {
        return $this->gpioStatus;
    }

    /**
     * @param int $pin
     *
     * @return GpioStatus|null
     */
    public function getStatus(int $pin)
    {
        $pin--;
        return isset($this->gpioStatus[$pin])
                ? $this->gpioStatus[$pin]
                : null;
    }

    /**
     * @return bool
     */
    public abstract function istCustomEvent(): bool;

    /**
     * @return bool
     */
    public abstract function isTimeoutEvent(): bool;

    /**
     * @return bool
     */
    public abstract function isAliveEvent(): bool;

    /**
     * @return bool
     */
    public abstract function isStateChangedEvent(): bool;

    /**
     * @param int $start
     * @param int $end
     *
     * @return int
     */
    public static function calculateTicksDelta(int $start, int $end): int
    {
        if ($end < 0 && $start > 0) {
            return (static::MAX_32_BIT_INT - $start) + (static::MAX_32_BIT_INT - abs($end));
        }

        return $end - $start;
    }
}